# coding: utf-8

"""
    Reactome Gene Set Analysis Service

    This is a Gene Set Analysis (GSA) Service, which provides GSA methods  whose results can be visualized using the Reactome pathway browser.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Dataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'data': 'str',
        'design': 'Design',
        'parameters': 'list[Parameter]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'data': 'data',
        'design': 'design',
        'parameters': 'parameters'
    }

    def __init__(self, name=None, type=None, data=None, design=None, parameters=None):  # noqa: E501
        """Dataset - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._data = None
        self._design = None
        self._parameters = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.data = data
        if design is not None:
            self.design = design
        if parameters is not None:
            self.parameters = parameters

    @property
    def name(self):
        """Gets the name of this Dataset.  # noqa: E501

        Every dataset must have a unique name.  # noqa: E501

        :return: The name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.

        Every dataset must have a unique name.  # noqa: E501

        :param name: The name of this Dataset.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Dataset.  # noqa: E501

        Specifies the type of dataset. Currently supported types are RNA-seq (raw read counts), intensity-based proteomics quantification (proteomics-int), raw proteomics spectral counts (proteomics-sc), and microarray data.  # noqa: E501

        :return: The type of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dataset.

        Specifies the type of dataset. Currently supported types are RNA-seq (raw read counts), intensity-based proteomics quantification (proteomics-int), raw proteomics spectral counts (proteomics-sc), and microarray data.  # noqa: E501

        :param type: The type of this Dataset.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["rnaseq_counts", "rnaseq_norm", "proteomics_int", "proteomics_sc", "microarray_norm", "metabolomics"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def data(self):
        """Gets the data of this Dataset.  # noqa: E501

        Tab-delimited expression matrix with the first column containing gene / protein identifiers, the first row containing the sample labels and each subsequent row corresponding to the expression of one gene in all samples. The 'tab' character must be escaped using '\\t' and new-lines must be escaped using '\\n'. If multiple datasets are submitted, shared samples between the datasets must contain identical labels.  # noqa: E501

        :return: The data of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Dataset.

        Tab-delimited expression matrix with the first column containing gene / protein identifiers, the first row containing the sample labels and each subsequent row corresponding to the expression of one gene in all samples. The 'tab' character must be escaped using '\\t' and new-lines must be escaped using '\\n'. If multiple datasets are submitted, shared samples between the datasets must contain identical labels.  # noqa: E501

        :param data: The data of this Dataset.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def design(self):
        """Gets the design of this Dataset.  # noqa: E501


        :return: The design of this Dataset.  # noqa: E501
        :rtype: Design
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this Dataset.


        :param design: The design of this Dataset.  # noqa: E501
        :type: Design
        """

        self._design = design

    @property
    def parameters(self):
        """Gets the parameters of this Dataset.  # noqa: E501


        :return: The parameters of this Dataset.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Dataset.


        :param parameters: The parameters of this Dataset.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
