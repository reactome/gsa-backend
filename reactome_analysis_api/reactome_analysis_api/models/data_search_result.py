# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api.models.parameter import Parameter  # noqa: F401,E501
from reactome_analysis_api import util


class DataSearchResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, description: str=None, species: str=None, resource_name: str=None, resource_loading_id: str=None, loading_parameters: List[Parameter]=None, web_link: str=None):  # noqa: E501
        """DataSearchResult - a model defined in Swagger

        :param id: The id of this DataSearchResult.  # noqa: E501
        :type id: str
        :param title: The title of this DataSearchResult.  # noqa: E501
        :type title: str
        :param description: The description of this DataSearchResult.  # noqa: E501
        :type description: str
        :param species: The species of this DataSearchResult.  # noqa: E501
        :type species: str
        :param resource_name: The resource_name of this DataSearchResult.  # noqa: E501
        :type resource_name: str
        :param resource_loading_id: The resource_loading_id of this DataSearchResult.  # noqa: E501
        :type resource_loading_id: str
        :param loading_parameters: The loading_parameters of this DataSearchResult.  # noqa: E501
        :type loading_parameters: List[Parameter]
        :param web_link: The web_link of this DataSearchResult.  # noqa: E501
        :type web_link: str
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'description': str,
            'species': str,
            'resource_name': str,
            'resource_loading_id': str,
            'loading_parameters': List[Parameter],
            'web_link': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'species': 'species',
            'resource_name': 'resource_name',
            'resource_loading_id': 'resource_loading_id',
            'loading_parameters': 'loading_parameters',
            'web_link': 'web_link'
        }

        self._id = id
        self._title = title
        self._description = description
        self._species = species
        self._resource_name = resource_name
        self._resource_loading_id = resource_loading_id
        self._loading_parameters = loading_parameters
        self._web_link = web_link

    @classmethod
    def from_dict(cls, dikt) -> 'DataSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSearchResult of this DataSearchResult.  # noqa: E501
        :rtype: DataSearchResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DataSearchResult.

        A unique identified for the dataset.  # noqa: E501

        :return: The id of this DataSearchResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DataSearchResult.

        A unique identified for the dataset.  # noqa: E501

        :param id: The id of this DataSearchResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this DataSearchResult.

        The dataset's title.  # noqa: E501

        :return: The title of this DataSearchResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this DataSearchResult.

        The dataset's title.  # noqa: E501

        :param title: The title of this DataSearchResult.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this DataSearchResult.

        A more detailed description of the study.  # noqa: E501

        :return: The description of this DataSearchResult.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DataSearchResult.

        A more detailed description of the study.  # noqa: E501

        :param description: The description of this DataSearchResult.
        :type description: str
        """

        self._description = description

    @property
    def species(self) -> str:
        """Gets the species of this DataSearchResult.

        The species investigated in this study.  # noqa: E501

        :return: The species of this DataSearchResult.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species: str):
        """Sets the species of this DataSearchResult.

        The species investigated in this study.  # noqa: E501

        :param species: The species of this DataSearchResult.
        :type species: str
        """
        if species is None:
            raise ValueError("Invalid value for `species`, must not be `None`")  # noqa: E501

        self._species = species

    @property
    def resource_name(self) -> str:
        """Gets the resource_name of this DataSearchResult.

        Name of the original data source.  # noqa: E501

        :return: The resource_name of this DataSearchResult.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name: str):
        """Sets the resource_name of this DataSearchResult.

        Name of the original data source.  # noqa: E501

        :param resource_name: The resource_name of this DataSearchResult.
        :type resource_name: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")  # noqa: E501

        self._resource_name = resource_name

    @property
    def resource_loading_id(self) -> str:
        """Gets the resource_loading_id of this DataSearchResult.

        The id of the resource to load the dataset from.  # noqa: E501

        :return: The resource_loading_id of this DataSearchResult.
        :rtype: str
        """
        return self._resource_loading_id

    @resource_loading_id.setter
    def resource_loading_id(self, resource_loading_id: str):
        """Sets the resource_loading_id of this DataSearchResult.

        The id of the resource to load the dataset from.  # noqa: E501

        :param resource_loading_id: The resource_loading_id of this DataSearchResult.
        :type resource_loading_id: str
        """
        if resource_loading_id is None:
            raise ValueError("Invalid value for `resource_loading_id`, must not be `None`")  # noqa: E501

        self._resource_loading_id = resource_loading_id

    @property
    def loading_parameters(self) -> List[Parameter]:
        """Gets the loading_parameters of this DataSearchResult.


        :return: The loading_parameters of this DataSearchResult.
        :rtype: List[Parameter]
        """
        return self._loading_parameters

    @loading_parameters.setter
    def loading_parameters(self, loading_parameters: List[Parameter]):
        """Sets the loading_parameters of this DataSearchResult.


        :param loading_parameters: The loading_parameters of this DataSearchResult.
        :type loading_parameters: List[Parameter]
        """
        if loading_parameters is None:
            raise ValueError("Invalid value for `loading_parameters`, must not be `None`")  # noqa: E501

        self._loading_parameters = loading_parameters

    @property
    def web_link(self) -> str:
        """Gets the web_link of this DataSearchResult.

        URL of the source dataset in the respective resource.  # noqa: E501

        :return: The web_link of this DataSearchResult.
        :rtype: str
        """
        return self._web_link

    @web_link.setter
    def web_link(self, web_link: str):
        """Sets the web_link of this DataSearchResult.

        URL of the source dataset in the respective resource.  # noqa: E501

        :param web_link: The web_link of this DataSearchResult.
        :type web_link: str
        """

        self._web_link = web_link
