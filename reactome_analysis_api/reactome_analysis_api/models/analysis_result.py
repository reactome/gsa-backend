# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api.models.analysis_result_mappings import AnalysisResultMappings  # noqa: F401,E501
from reactome_analysis_api.models.analysis_result_reactome_links import AnalysisResultReactomeLinks  # noqa: F401,E501
from reactome_analysis_api.models.analysis_result_results import AnalysisResultResults  # noqa: F401,E501
from reactome_analysis_api import util


class AnalysisResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, release: str=None, method_name: str=None, results: List[AnalysisResultResults]=None, reactome_links: List[AnalysisResultReactomeLinks]=None, mappings: List[AnalysisResultMappings]=None):  # noqa: E501
        """AnalysisResult - a model defined in Swagger

        :param release: The release of this AnalysisResult.  # noqa: E501
        :type release: str
        :param method_name: The method_name of this AnalysisResult.  # noqa: E501
        :type method_name: str
        :param results: The results of this AnalysisResult.  # noqa: E501
        :type results: List[AnalysisResultResults]
        :param reactome_links: The reactome_links of this AnalysisResult.  # noqa: E501
        :type reactome_links: List[AnalysisResultReactomeLinks]
        :param mappings: The mappings of this AnalysisResult.  # noqa: E501
        :type mappings: List[AnalysisResultMappings]
        """
        self.swagger_types = {
            'release': str,
            'method_name': str,
            'results': List[AnalysisResultResults],
            'reactome_links': List[AnalysisResultReactomeLinks],
            'mappings': List[AnalysisResultMappings]
        }

        self.attribute_map = {
            'release': 'release',
            'method_name': 'methodName',
            'results': 'results',
            'reactome_links': 'reactome_links',
            'mappings': 'mappings'
        }

        self._release = release
        self._method_name = method_name
        self._results = results
        self._reactome_links = reactome_links
        self._mappings = mappings

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResult of this AnalysisResult.  # noqa: E501
        :rtype: AnalysisResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def release(self) -> str:
        """Gets the release of this AnalysisResult.

        Release version of the Reactome pathway database used.  # noqa: E501

        :return: The release of this AnalysisResult.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release: str):
        """Sets the release of this AnalysisResult.

        Release version of the Reactome pathway database used.  # noqa: E501

        :param release: The release of this AnalysisResult.
        :type release: str
        """
        if release is None:
            raise ValueError("Invalid value for `release`, must not be `None`")  # noqa: E501

        self._release = release

    @property
    def method_name(self) -> str:
        """Gets the method_name of this AnalysisResult.

        Name of the analysis method used.  # noqa: E501

        :return: The method_name of this AnalysisResult.
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name: str):
        """Sets the method_name of this AnalysisResult.

        Name of the analysis method used.  # noqa: E501

        :param method_name: The method_name of this AnalysisResult.
        :type method_name: str
        """
        if method_name is None:
            raise ValueError("Invalid value for `method_name`, must not be `None`")  # noqa: E501

        self._method_name = method_name

    @property
    def results(self) -> List[AnalysisResultResults]:
        """Gets the results of this AnalysisResult.


        :return: The results of this AnalysisResult.
        :rtype: List[AnalysisResultResults]
        """
        return self._results

    @results.setter
    def results(self, results: List[AnalysisResultResults]):
        """Sets the results of this AnalysisResult.


        :param results: The results of this AnalysisResult.
        :type results: List[AnalysisResultResults]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    @property
    def reactome_links(self) -> List[AnalysisResultReactomeLinks]:
        """Gets the reactome_links of this AnalysisResult.


        :return: The reactome_links of this AnalysisResult.
        :rtype: List[AnalysisResultReactomeLinks]
        """
        return self._reactome_links

    @reactome_links.setter
    def reactome_links(self, reactome_links: List[AnalysisResultReactomeLinks]):
        """Sets the reactome_links of this AnalysisResult.


        :param reactome_links: The reactome_links of this AnalysisResult.
        :type reactome_links: List[AnalysisResultReactomeLinks]
        """

        self._reactome_links = reactome_links

    @property
    def mappings(self) -> List[AnalysisResultMappings]:
        """Gets the mappings of this AnalysisResult.


        :return: The mappings of this AnalysisResult.
        :rtype: List[AnalysisResultMappings]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings: List[AnalysisResultMappings]):
        """Sets the mappings of this AnalysisResult.


        :param mappings: The mappings of this AnalysisResult.
        :type mappings: List[AnalysisResultMappings]
        """

        self._mappings = mappings
