# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api.models.method_parameters import MethodParameters  # noqa: F401,E501
from reactome_analysis_api import util


class Method(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, data_types: List[str]=None, description: str=None, parameters: List[MethodParameters]=None):  # noqa: E501
        """Method - a model defined in Swagger

        :param name: The name of this Method.  # noqa: E501
        :type name: str
        :param data_types: The data_types of this Method.  # noqa: E501
        :type data_types: List[str]
        :param description: The description of this Method.  # noqa: E501
        :type description: str
        :param parameters: The parameters of this Method.  # noqa: E501
        :type parameters: List[MethodParameters]
        """
        self.swagger_types = {
            'name': str,
            'data_types': List[str],
            'description': str,
            'parameters': List[MethodParameters]
        }

        self.attribute_map = {
            'name': 'name',
            'data_types': 'data_types',
            'description': 'description',
            'parameters': 'parameters'
        }

        self._name = name
        self._data_types = data_types
        self._description = description
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'Method':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Method of this Method.  # noqa: E501
        :rtype: Method
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Method.


        :return: The name of this Method.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Method.


        :param name: The name of this Method.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def data_types(self) -> List[str]:
        """Gets the data_types of this Method.

        List of data types supported by this analysis method.  # noqa: E501

        :return: The data_types of this Method.
        :rtype: List[str]
        """
        return self._data_types

    @data_types.setter
    def data_types(self, data_types: List[str]):
        """Sets the data_types of this Method.

        List of data types supported by this analysis method.  # noqa: E501

        :param data_types: The data_types of this Method.
        :type data_types: List[str]
        """
        if data_types is None:
            raise ValueError("Invalid value for `data_types`, must not be `None`")  # noqa: E501

        self._data_types = data_types

    @property
    def description(self) -> str:
        """Gets the description of this Method.


        :return: The description of this Method.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Method.


        :param description: The description of this Method.
        :type description: str
        """

        self._description = description

    @property
    def parameters(self) -> List[MethodParameters]:
        """Gets the parameters of this Method.


        :return: The parameters of this Method.
        :rtype: List[MethodParameters]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[MethodParameters]):
        """Sets the parameters of this Method.


        :param parameters: The parameters of this Method.
        :type parameters: List[MethodParameters]
        """

        self._parameters = parameters
